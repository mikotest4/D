from pyrogram import Client, filters
from bot import Bot
from config import *
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.database import *
import urllib.parse
import requests
import io

# UPI IDs for payment
UPI_1 = "singhzerotwo@fam"
UPI_2 = "7348433876@mbk"

# Plan details
PLANS = {
    "7days": {"price": 50, "duration": "7 Days", "days": 7},
    "1month": {"price": 130, "duration": "1 Month", "days": 30},
    "3months": {"price": 299, "duration": "3 Months", "days": 90},
    "6months": {"price": 599, "duration": "6 Months", "days": 180},
    "1year": {"price": 999, "duration": "1 Year", "days": 365}
}

# Store pending gift card payments (in production, use proper database)
pending_gift_cards = {}
pending_payments = {}
waiting_for_screenshot = {}  # Track users waiting to send screenshots
waiting_for_gift_card = {}  # Track users waiting to send gift card details

async def generate_upi_qr_external(upi_id, amount, plan_name="Premium"):
    """Generate UPI QR code using external API"""
    try:
        # Create UPI payment URL
        note = f"{plan_name} Premium Plan"
        upi_url = f"upi://pay?pa={upi_id}&pn={urllib.parse.quote(note)}&am={amount}&cu=INR&tn={urllib.parse.quote('Premium Payment')}"
        
        # Generate QR Code using external API
        qr_api_url = f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={urllib.parse.quote(upi_url)}"
        
        print(f"Generated UPI URL: {upi_url}")
        print(f"QR API URL: {qr_api_url}")
        
        # Download QR code image
        response = requests.get(qr_api_url, timeout=10)
        if response.status_code == 200:
            qr_image = io.BytesIO(response.content)
            qr_image.seek(0)
            return qr_image
        else:
            print(f"Failed to generate QR code: {response.status_code}")
            return None
    except Exception as e:
        print(f"Error generating QR code: {e}")
        return None

@Bot.on_callback_query()
async def cb_handler(client: Bot, query: CallbackQuery):
    data = query.data

    if data == "help":
        await query.message.edit_text(
            text=HELP_TXT.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='start'),
                 InlineKeyboardButton("·¥Ñ ü·¥èÍú±·¥á", callback_data='close')]
            ])
        )

    elif data == "about":
        await query.message.edit_text(
            text=ABOUT_TXT.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='start'),
                 InlineKeyboardButton('·¥Ñ ü·¥èÍú±·¥á', callback_data='close')]
            ])
        )

    elif data == "start":
        await query.message.edit_text(
            text=START_MSG.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data='help'),
                 InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data='about')]
            ])
        )

    elif data == "premium":
        await query.message.delete()
        await client.send_photo(
            chat_id=query.message.chat.id,
            photo="https://graph.org/file/608d82ad34a92e32d37ce-25e6e6bf08e194f088.jpg",
            caption=(
                f" ú·¥á ü ü·¥è „Äé{query.from_user.first_name}„Äè‚ùãùÑó‚Éùü¶ã üëã\n\n"
                f" ú·¥á Ä·¥á  è·¥è·¥ú  ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥á·¥ç ô·¥á ÄÍú± ú…™·¥ò ·¥èÍú∞ ·¥õ ú…™Íú±  ô·¥è·¥õ.\n"
                f"Íú±·¥è·¥ç·¥á ·¥ò ü·¥Ä…¥ ·¥Ä Ä·¥á …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á·¥ç ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥á·¥á·¥Ö.\n"
                f"…™Íú∞  è·¥è·¥ú ·¥ç·¥Ä·¥Ö·¥á ·¥õ ú·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ ·¥ÄÍú∞·¥õ·¥á Ä 11:00 ·¥ò·¥ç, …™“ì ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä …™s ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥õ ú·¥Ä…¥  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥°…™ ü ü ·¥Ä·¥Ñ·¥õ…™·¥†·¥á s·¥è·¥è…¥ ·¥è·¥õ ú·¥á Ä·¥°…™Íú±·¥á, …™·¥õ ·¥°…™ ü ü  ô·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö …™…¥ ·¥õ ú·¥á ·¥ç·¥è Ä…¥…™…¥…¢."
            ),
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("7 Days 50 Rs", callback_data="plan_7days"),
                    InlineKeyboardButton("1 Month 130 Rs", callback_data="plan_1month")
                ],
                [
                    InlineKeyboardButton("3 Month 299 Rs", callback_data="plan_3months"),
                    InlineKeyboardButton("6 Month 599 Rs", callback_data="plan_6months")
                ],
                [
                    InlineKeyboardButton("1 Year 999 Rs", callback_data="plan_1year")
                ],
                [
                    InlineKeyboardButton("üîí Close", callback_data="close")
                ]
            ])
        )

    # Handle plan selection callbacks
    elif data.startswith("plan_"):
        plan_key = data.split("_")[1]
        plan = PLANS.get(plan_key)
        
        if plan:
            await query.message.edit_caption(
                caption=(
                    f"üìã Selected Plan: {plan['duration']} - ‚Çπ{plan['price']}\n\n"
                    f"üí≥ Please select your payment method:"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("UPI 1", callback_data=f"payment_upi1_{plan_key}"),
                        InlineKeyboardButton("UPI 2", callback_data=f"payment_upi2_{plan_key}")
                    ],
                    [
                        InlineKeyboardButton("Amazon Gift Card", callback_data=f"payment_gift_{plan_key}")
                    ],
                    [
                        InlineKeyboardButton("‚Äπ Back to Plans", callback_data="premium"),
                        InlineKeyboardButton("üîí Close", callback_data="close")
                    ]
                ])
            )

    # Handle UPI payment method selection
    elif data.startswith("payment_upi1_") or data.startswith("payment_upi2_"):
        parts = data.split("_")
        payment_method = parts[1]
        plan_key = parts[2]
        plan = PLANS.get(plan_key)
        
        if plan:
            upi_id = UPI_1 if payment_method == "upi1" else UPI_2
            
            # Store payment info for screenshot handling
            user_id = query.from_user.id
            pending_payments[user_id] = {
                "plan": plan_key,
                "amount": plan['price'],
                "duration": plan['duration'],
                "upi_method": payment_method,
                "upi_id": upi_id
            }
            
            # Generate QR code
            qr_image = await generate_upi_qr_external(upi_id, plan['price'], plan['duration'])
            
            if qr_image:
                await query.message.delete()
                await client.send_photo(
                    chat_id=query.message.chat.id,
                    photo=qr_image,
                    caption=(
                        f"üìù …™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥s:\n"
                        f"1. s·¥Ñ·¥Ä…¥ ·¥õ ú·¥á Q Ä ·¥Ñ·¥è·¥Ö·¥á ·¥Ä ô·¥è·¥†·¥á ·¥è Ä ·¥ò·¥Ä è ·¥õ·¥è U·¥ò…™ …™·¥Ö\n"
                        f"2. ·¥ò·¥Ä è ·¥áx·¥Ä·¥Ñ·¥õ ü è ‚Çπ{plan['price']}.\n"
                        f"3. ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ …™  ú·¥Ä·¥†·¥á ·¥ò·¥Ä…™·¥Ö.\n\n"
                        f"…¥·¥è·¥õ·¥á: …™Íú∞  è·¥è·¥ú ·¥ç·¥Ä·¥ã·¥á ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ ·¥Ä·¥õ …¥…™…¢ ú·¥õ ·¥ÄÍú∞·¥õ·¥á Ä 11 ·¥ò·¥ç ·¥õ ú·¥Ä…¥  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥ç·¥è Ä…¥…™…¥…¢  ô·¥á·¥Ñ·¥Ä·¥ús·¥á ·¥è·¥°…¥·¥á Ä …™s s ü·¥á·¥á·¥ò…™…¥…¢ ·¥õ ú·¥Ä·¥õ's ·¥° ú è  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä·¥Ñ·¥õ…™·¥†·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç. …™Íú∞ ·¥è·¥°…¥·¥á Ä …™s ·¥è…¥ ü…™…¥·¥á ·¥õ ú·¥Ä…¥  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥°…™ ü ü ·¥Ä·¥Ñ·¥õ…™·¥†·¥á …™…¥ ·¥Ä…¥  ú·¥è·¥ú Ä. s·¥è ·¥ò·¥Ä è ·¥Ä·¥õ  è·¥è·¥ú Ä ·¥è·¥°…¥  Ä…™s·¥ã ·¥ÄÍú∞·¥õ·¥á Ä …¥…™…¢ ú·¥õ 11 ·¥ò·¥ç. ·¥Ö·¥è…¥'·¥õ  ô ü·¥Ä·¥ç·¥á ·¥è·¥°…¥·¥á Ä."
                    ),
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ I Have Paid", callback_data=f"paid_{user_id}")
                        ],
                        [
                            InlineKeyboardButton("‚Äπ Back to Plans", callback_data="premium"),
                            InlineKeyboardButton("üîí Close", callback_data="close")
                        ]
                    ])
                )
            else:
                await query.answer("Failed to generate QR code. Please try again.", show_alert=True)

    # Handle "I Have Paid" button
    elif data.startswith("paid_"):
        user_id = int(data.split("_")[1])
        
        if user_id == query.from_user.id and user_id in pending_payments:
            payment_info = pending_payments[user_id]
            
            # Mark user as waiting for screenshot
            waiting_for_screenshot[user_id] = True
            
            await query.message.edit_caption(
                caption=(
                    f"üì∏ ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ\n\n"
                    f"üìã ·¥ò ü·¥Ä…¥: {payment_info['duration']} - ‚Çπ{payment_info['amount']}\n\n"
                    f"üì§ s·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ …¥·¥è·¥°.\n"
                    f"üîÑ s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥°…™ ü ü  ô·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥è·¥°…¥·¥á Ä Íú∞·¥è Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\n"
                    f"‚ö° ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥°…™ ü ü  ô·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥ÄÍú∞·¥õ·¥á Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥."
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚Äπ Back to Payment", callback_data=f"payment_{payment_info['upi_method']}_{payment_info['plan']}"),
                        InlineKeyboardButton("üîí Close", callback_data="close")
                    ]
                ])
            )
        else:
            await query.answer("Invalid payment session. Please start again.", show_alert=True)

    # Handle Amazon Gift Card payment
    elif data.startswith("payment_gift_"):
        plan_key = data.split("_")[2]
        plan = PLANS.get(plan_key)
        
        if plan:
            user_id = query.from_user.id
            pending_gift_cards[user_id] = {
                "plan": plan_key,
                "amount": plan['price'],
                "duration": plan['duration']
            }
            
            # Send text message instead of photo to avoid URL error
            await query.message.edit_caption(
                caption=(
                    f"üéÅ ·¥Ä·¥ç·¥Ä·¥¢·¥è…¥ …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ\n\n"
                    f"üìã ·¥ò ü·¥Ä…¥: {plan['duration']} - ‚Çπ{plan['price']}\n\n"
                    f"üìù …™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥s:\n"
                    f"1. ·¥ò·¥ú Ä·¥Ñ ú·¥Äs·¥á ·¥Ä·¥ç·¥Ä·¥¢·¥è…¥ …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥°·¥è Ä·¥õ ú ‚Çπ{plan['price']}\n"
                    f"2. s·¥á…¥·¥Ö ·¥õ ú·¥á …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥Ñ·¥è·¥Ö·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥\n"
                    f"3.  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥°…™ ü ü  ô·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥ÄÍú∞·¥õ·¥á Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥\n"
                    f"4.  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è  ô·¥ú è ·¥áx·¥Ä·¥Ñ·¥õ ü è ·¥Ä·¥ç·¥Ä·¥¢·¥è…¥ …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥†·¥è·¥ú·¥Ñ ú·¥á Ä. ·¥è·¥õ ú·¥á Ä ·¥Ñ·¥Ä Ä·¥Ös …¥·¥è·¥õ ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ·¥á·¥Ö ·¥è…¥ ü è ·¥Ä·¥ç·¥Ä·¥¢·¥è…¥ …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö.\n\n"
                    f"‚ö†Ô∏è ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú·¥á …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥ç·¥Ä·¥õ·¥Ñ ú·¥ás ·¥áx·¥Ä·¥Ñ·¥õ ü è: ‚Çπ{plan['price']}\n"
                    f"‚ÄºÔ∏è …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ös ·¥Ä Ä·¥á …¥·¥è…¥- Ä·¥áÍú∞·¥ú…¥·¥Ö·¥Ä ô ü·¥á"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üéÅ Send Gift Card", callback_data=f"send_gift_{user_id}")
                    ],
                    [
                        InlineKeyboardButton("‚Äπ Back to Plans", callback_data="premium"),
                        InlineKeyboardButton("üîí Close", callback_data="close")
                    ]
                ])
            )

    # Handle "Send Gift Card" button
    elif data.startswith("send_gift_"):
        user_id = int(data.split("_")[2])
        
        if user_id == query.from_user.id and user_id in pending_gift_cards:
            gift_card_info = pending_gift_cards[user_id]
            
            # Mark user as waiting for gift card details
            waiting_for_gift_card[user_id] = True
            
            await query.message.edit_caption(
                caption=(
                    f"üéÅ s·¥á…¥·¥Ö …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥Ö·¥á·¥õ·¥Ä…™ üs\n\n"
                    f"üìã ·¥ò ü·¥Ä…¥: {gift_card_info['duration']} - ‚Çπ{gift_card_info['amount']}\n\n"
                    f"üì§ …¥·¥è·¥° s·¥á…¥·¥Ö ·¥Ö…™ Ä·¥á·¥Ñ·¥õ  ü…™…¥·¥ã ·¥õ·¥è ·¥Ñ ü·¥Ä…™·¥ç …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö.\n"
                    f"üé´ …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö …™·¥Ö. ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ\n"
                    f"üì∏ ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ …™…¥·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö  Ä·¥á·¥Ö·¥á·¥á·¥ç …™·¥Ö\n\n"
                    f"‚ö° …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥°…™ ü ü  ô·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥è·¥°…¥·¥á Ä Íú∞·¥è Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥."
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚Äπ Back to Payment", callback_data=f"payment_gift_{gift_card_info['plan']}"),
                        InlineKeyboardButton("üîí Close", callback_data="close")
                    ]
                ])
            )
        else:
            await query.answer("Invalid gift card session. Please start again.", show_alert=True)

    elif data == "close":
        # Remove user from waiting states when closing
        user_id = query.from_user.id
        if user_id in waiting_for_screenshot:
            del waiting_for_screenshot[user_id]
        if user_id in pending_payments:
            del pending_payments[user_id]
        if user_id in waiting_for_gift_card:
            del waiting_for_gift_card[user_id]
        if user_id in pending_gift_cards:
            del pending_gift_cards[user_id]
            
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass

    elif data.startswith("rfs_ch_"):
        cid = int(data.split("_")[2])
        try:
            chat = await client.get_chat(cid)
            mode = await db.get_channel_mode(cid)
            status = "üü¢ ·¥è…¥" if mode == "on" else "üî¥ ·¥è“ì“ì"
            new_mode = "·¥è“ì“ì" if mode == "on" else "on"
            buttons = [
                [InlineKeyboardButton(f" Ä·¥á«´ ·¥ç·¥è·¥Ö·¥á {'OFF' if mode == 'on' else 'ON'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
                [InlineKeyboardButton("‚Äπ  ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
            ]
            await query.message.edit_text(
                f"Channel: {chat.title}\nCurrent Force-Sub Mode: {status}",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception:
            await query.answer("Failed to fetch channel info", show_alert=True)

    elif data.startswith("rfs_toggle_"):
        cid, action = data.split("_")[2:]
        cid = int(cid)
        mode = "on" if action == "on" else "off"

        await db.set_channel_mode(cid, mode)
        await query.answer(f"Force-Sub set to {'ON' if mode == 'on' else 'OFF'}")

        # Refresh the same channel's mode view
        chat = await client.get_chat(cid)
        status = "üü¢ ON" if mode == "on" else "üî¥ OFF"
        new_mode = "off" if mode == "on" else "on"
        buttons = [
            [InlineKeyboardButton(f" Ä·¥á«´ ·¥ç·¥è·¥Ö·¥á {'OFF' if mode == 'on' else 'ON'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
            [InlineKeyboardButton("‚Äπ  ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
        ]
        await query.message.edit_text(
            f"Channel: {chat.title}\nCurrent Force-Sub Mode: {status}",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    elif data == "fsub_back":
        channels = await db.show_channels()
        buttons = []
        for cid in channels:
            try:
                chat = await client.get_chat(cid)
                mode = await db.get_channel_mode(cid)
                status = "üü¢" if mode == "on" else "üî¥"
                buttons.append([InlineKeyboardButton(f"{status} {chat.title}", callback_data=f"rfs_ch_{cid}")])
            except:
                continue

        await query.message.edit_text(
            "s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥õ·¥è…¢…¢ ü·¥á …™·¥õs “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥ç·¥è·¥Ö·¥á:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

# Custom filter function to check if user is waiting for screenshot
def screenshot_filter(_, __, message):
    user_id = message.from_user.id
    return user_id in waiting_for_screenshot and user_id in pending_payments

# Create the custom filter
waiting_screenshot_filter = filters.create(screenshot_filter)

# Handle payment screenshots ONLY when user is specifically waiting
@Bot.on_message(filters.photo & filters.private & waiting_screenshot_filter)
async def handle_payment_screenshot(client: Bot, message: Message):
    user_id = message.from_user.id
    payment_info = pending_payments[user_id]
    
    # Forward screenshot to owner
    try:
        owner_caption = (
            f"üí≥ Payment Screenshot Received\n\n"
            f"üë§ User: {message.from_user.first_name} (@{message.from_user.username})\n"
            f"üÜî User ID: {user_id}\n"
            f"üìã Plan: {payment_info['duration']} - ‚Çπ{payment_info['amount']}\n\n"
            f"‚ö° Please verify and activate premium"
        )
        
        await client.send_photo(
            chat_id=OWNER_ID,
            photo=message.photo.file_id,
            caption=owner_caption
        )
        
        # Confirm to user
        await message.reply_text(
            f"‚úÖ  è·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ  ú·¥Äs  ô·¥á·¥á…¥ s·¥á…¥·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä Íú∞·¥è Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\n\n"
            f"‚è≥ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥Ä ü.  è·¥è·¥ú ·¥°…™ ü ü  ô·¥á …¥·¥è·¥õ…™Íú∞…™·¥á·¥Ö ·¥è…¥·¥Ñ·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç …™s ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üè† Home", callback_data="start"),
                    InlineKeyboardButton("üì¢ Channel", url="https://t.me/+f4n8nwqVzFhiMmUx")
                ]
            ])
        )
        
        # Remove user from waiting state after screenshot is processed
        del waiting_for_screenshot[user_id]
        
    except Exception as e:
        await message.reply_text("‚ùå Failed to forward screenshot. Please contact admin directly.")
        print(f"Error forwarding screenshot: {e}")

# Custom filter function to check if user is waiting for gift card
def gift_card_filter(_, __, message):
    user_id = message.from_user.id
    return user_id in waiting_for_gift_card and user_id in pending_gift_cards

# Create the custom filter for gift cards
waiting_gift_card_filter = filters.create(gift_card_filter)

# Handle gift card submissions (text or photo)
@Bot.on_message((filters.text | filters.photo) & filters.private & waiting_gift_card_filter)
async def handle_gift_card_submission(client: Bot, message: Message):
    user_id = message.from_user.id
    gift_card_info = pending_gift_cards[user_id]
    
    try:
        # Prepare owner message based on message type
        if message.photo:
            # Forward gift card screenshot to owner
            owner_caption = (
                f"üéÅ Gift Card Screenshot Received\n\n"
                f"üë§ User: {message.from_user.first_name} (@{message.from_user.username})\n"
                f"üÜî User ID: {user_id}\n"
                f"üìã Plan: {gift_card_info['duration']} - ‚Çπ{gift_card_info['amount']}\n\n"
                f"‚ö° Please verify gift card and activate premium"
            )
            
            await client.send_photo(
                chat_id=OWNER_ID,
                photo=message.photo.file_id,
                caption=owner_caption
            )
        else:
            # Forward gift card text/code to owner
            owner_message = (
                f"üéÅ Gift Card Code/Link Received\n\n"
                f"üë§ User: {message.from_user.first_name} (@{message.from_user.username})\n"
                f"üÜî User ID: {user_id}\n"
                f"üìã Plan: {gift_card_info['duration']} - ‚Çπ{gift_card_info['amount']}\n\n"
                f"üé´ Gift Card Details:\n{message.text}\n\n"
                f"‚ö° Please verify gift card and activate premium"
            )
            
            await client.send_message(
                chat_id=OWNER_ID,
                text=owner_message
            )
        
        # Confirm to user
        await message.reply_text(
            f"‚úÖ  è·¥è·¥ú Ä …¢…™Íú∞·¥õ ·¥Ñ·¥Ä Ä·¥Ö ·¥Ö·¥á·¥õ·¥Ä…™ üs  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ s·¥á…¥·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä Íú∞·¥è Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\n\n"
            f"‚è≥ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥Ä ü.  è·¥è·¥ú ·¥°…™ ü ü  ô·¥á …¥·¥è·¥õ…™Íú∞…™·¥á·¥Ö ·¥è…¥·¥Ñ·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç …™s ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö.",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üè† Home", callback_data="start"),
                    InlineKeyboardButton("üì¢ Channel", url="https://t.me/+f4n8nwqVzFhiMmUx")
                ]
            ])
        )
        
        # Remove user from waiting state after gift card is processed
        del waiting_for_gift_card[user_id]
        
    except Exception as e:
        await message.reply_text("‚ùå Failed to forward gift card details. Please contact admin directly.")
        print(f"Error forwarding gift card: {e}")
